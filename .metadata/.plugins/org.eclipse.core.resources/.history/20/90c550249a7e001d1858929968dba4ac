package com.fsc.jwt.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityCustomizer;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

import com.fsc.jwt.security.Jwt.AuthEntryPointJwt;
import com.fsc.jwt.security.Jwt.JwtConfigurer;
import com.fsc.jwt.security.Jwt.JwtTokenProvider;

@Configuration
public class SecurityConfig {

	@Autowired
	private JwtTokenProvider tokenProvider;

	@Autowired
	private UserDetailsService userDetailsService;

	@Autowired
	private AuthEntryPointJwt authEntryPointJwt;

	/*
	 * @Bean PasswordEncoder passwordEncoder() { Map<String, PasswordEncoder>
	 * encoders = new HashMap<>(); encoders.put("pbkdf2", new
	 * Pbkdf2PasswordEncoder(null, 0, 0, null)); DelegatingPasswordEncoder
	 * passwordEncoder = new DelegatingPasswordEncoder("pbkdf2", encoders);
	 * passwordEncoder.setDefaultPasswordEncoderForMatches(new
	 * Pbkdf2PasswordEncoder(null,0,0,null)); return passwordEncoder(); }
	 */

	@Bean
	public WebSecurityCustomizer webSecurityCustomizer() {
		return (web) -> web.ignoring().requestMatchers("/js/**", "/images/**");
	}

	@Bean
	public DaoAuthenticationProvider authenticationProvider() {
		DaoAuthenticationProvider daoAuthenticationProvider = new DaoAuthenticationProvider();

		daoAuthenticationProvider.setUserDetailsService(userDetailsService);
		daoAuthenticationProvider.setPasswordEncoder(passwordEncoder());

		return daoAuthenticationProvider;
	}

	@Bean
	public AuthenticationManager authenticationManager(AuthenticationConfiguration authenticationConfiguration)
			throws Exception {
		return authenticationConfiguration.getAuthenticationManager();
	}

	@Bean
	public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
		http.cors().and().csrf().disable().exceptionHandling().authenticationEntryPoint(authEntryPointJwt).and()
				.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and()
				.authorizeHttpRequests().requestMatchers("/auth/signin").permitAll().requestMatchers("/auth/refresh")
				.permitAll().requestMatchers("/api-docs/**").permitAll().requestMatchers("/swagger-ui.html**")
				.permitAll().requestMatchers("/api/**").authenticated().requestMatchers("/users").denyAll().anyRequest()
				.authenticated().and().cors().and().apply(new JwtConfigurer(tokenProvider));

		return http.build();
	}

	@Bean
	public PasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}

}
